{"version":3,"sources":["TodoTable.js","RestDataSource.js","App.js","serviceWorker.js","index.js"],"names":["dataSource","RestDataSource","err_handler","Object","classCallCheck","this","SendRequst","method","url","params","data","Axios","request","error_handler","formItemLayout","labelCol","xs","span","sm","wrapperCol","buttonLayout","offset","TodoTable","props","_this","possibleConstructorReturn","getPrototypeOf","call","getTodo","_","completed","then","res","todos","setState","filter","v","map","content","text","newTodo","record","drawOpen","handleSubmit","drawClose","form","getFieldsValue","state","id","remark","uuid","v1","console","log","setDone","modal","confirm","title","centered","onOk","drawerVisiable","_this2","_this3","columns","dataIndex","key","render","value","Date","toString","split","slice","join","align","react_default","a","createElement","es_button","onClick","handleDelete","openEdit","getFieldDecorator","_this$state","className","type","table","pagination","rowKey","drawer","width","placement","closable","onClose","visible","destroyOnClose","es_form","Item","label","initialValue","rules","required","message","input","placeholder","TextArea","style","marginRight","Component","src_TodoTable","create","Content","Header","Sider","App","_useState","useState","_useState2","slicedToArray","setCompleted","layout","minHeight","backgroundColor","background","menu","theme","defaultSelectedKeys","mode","icon","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff8975a9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Table, Button, Modal, Drawer, Input, Form } from \"antd\";\r\nimport { RestDataSource } from \"./RestDataSource\";\r\nimport uuid from \"uuid\";\r\nconst dataSource = new RestDataSource();\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 8 }\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 16 }\r\n  }\r\n};\r\n\r\nconst buttonLayout = {\r\n  wrapperCol: { span: 14, offset: 4 }\r\n};\r\n\r\nclass TodoTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      drawerVisiable: false,\r\n      record: null,\r\n      todos: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTodo();\r\n  }\r\n\r\n  componentDidUpdate(props) {\r\n    if (this.props.completed != props.completed) {\r\n      this.getTodo();\r\n    }\r\n  }\r\n\r\n  getTodo = _ => {\r\n    let { completed } = this.props;\r\n    dataSource.SendRequst(\"get\", \"/todo/list\").then(res => {\r\n      let todos = res.data || [];\r\n      this.setState({\r\n        todos: todos\r\n          .filter(v => v.completed == completed)\r\n          .map(v => {\r\n            v.content = v.text;\r\n            return v;\r\n          })\r\n      });\r\n    });\r\n  };\r\n\r\n  newTodo = _ => {\r\n    this.setState({\r\n      record: null\r\n    });\r\n    this.drawOpen();\r\n  };\r\n\r\n  openEdit(record) {\r\n    this.drawOpen();\r\n    this.setState({\r\n      record: record\r\n    });\r\n  }\r\n\r\n  handleDelete(record) {\r\n    Modal.confirm({\r\n      title: \"提示\",\r\n      centered: true,\r\n      content: \"确定要删除该代办项吗？\",\r\n      onOk: () => {\r\n        console.log(\"删除\");\r\n        dataSource\r\n          .SendRequst(\"delete\", \"/todo/del\", {\r\n            id: record.id\r\n          })\r\n          .then(v => {\r\n            this.getTodo();\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  handleSubmit = _ => {\r\n    this.drawClose();\r\n    let data = this.props.form.getFieldsValue();\r\n\r\n    let { record } = this.state;\r\n    if (record) {\r\n      dataSource\r\n        .SendRequst(\"post\", \"/todo/edit\", {\r\n          completed: false,\r\n          text: data.content,\r\n          id: record.id,\r\n          remark: data.remark\r\n        })\r\n        .then(v => {\r\n          this.getTodo();\r\n        });\r\n    } else {\r\n      dataSource\r\n        .SendRequst(\"post\", \"/todo/add\", {\r\n          completed: false,\r\n          text: data.content,\r\n          id: uuid.v1(),\r\n          remark: data.remark\r\n        })\r\n        .then(v => {\r\n          this.getTodo();\r\n        });\r\n    }\r\n\r\n    console.log(\"发请求！\", {\r\n      completed: false,\r\n      text: data.content,\r\n      id: \"\",\r\n      remark: data.remark\r\n    });\r\n  };\r\n\r\n  setDone = record => {\r\n    Modal.confirm({\r\n      title: \"提示\",\r\n      centered: true,\r\n      content: \"确定要标记为完成状态吗？\",\r\n      onOk: () => {\r\n        dataSource\r\n          .SendRequst(\"post\", \"todo/complete\", {\r\n            id: record.id\r\n          })\r\n          .then(v => {\r\n            this.getTodo();\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  drawOpen = _ => {\r\n    this.setState({\r\n      drawerVisiable: true\r\n    });\r\n  };\r\n  drawClose = _ => {\r\n    this.setState({\r\n      drawerVisiable: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { todos } = this.state;\r\n    const dataSource = todos;\r\n\r\n    const columns = [\r\n      {\r\n        title: \"内容\",\r\n        dataIndex: \"content\",\r\n        key: \"content\"\r\n      },\r\n      {\r\n        title: \"备注\",\r\n        dataIndex: \"remark\",\r\n        key: \"remark\"\r\n      },\r\n      {\r\n        title: \"完成状态\",\r\n        dataIndex: \"completed\",\r\n        key: \"completed\",\r\n        render: v => (v ? \"已完成\" : \"未完成\")\r\n      },\r\n      {\r\n        title: \"创建时间\",\r\n        dataIndex: \"timeStamp\",\r\n        key: \"timeStamp\",\r\n        render: value =>\r\n          new Date(value)\r\n            .toString()\r\n            .split(\" \")\r\n            .slice(1, 5)\r\n            .join(\" \")\r\n      },\r\n      {\r\n        title: \"操作\",\r\n        align: \"center\",\r\n        render: (text, record) => {\r\n          let { completed } = this.props;\r\n          if (completed) {\r\n            return (\r\n              <div>\r\n                <Button\r\n                  onClick={() => {\r\n                    this.handleDelete(record);\r\n                  }}\r\n                >\r\n                  删除\r\n                </Button>\r\n              </div>\r\n            );\r\n          } else {\r\n            return (\r\n              <div>\r\n                <Button\r\n                  onClick={() => {\r\n                    this.setDone(record);\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  设为已完成\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    this.openEdit(record);\r\n                  }}\r\n                >\r\n                  编辑\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    this.handleDelete(record);\r\n                  }}\r\n                >\r\n                  删除\r\n                </Button>\r\n              </div>\r\n            );\r\n          }\r\n        }\r\n      }\r\n    ];\r\n    const { getFieldDecorator } = this.props.form;\r\n    const { record, drawerVisiable } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"toolbar\">\r\n          <Button type=\"primary\" onClick={this.newTodo}>\r\n            新建Todo\r\n          </Button>\r\n        </div>\r\n        <Table\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          pagination={false}\r\n          rowKey={record => record.id}\r\n        />\r\n        <Drawer\r\n          width=\"400px\"\r\n          title={record ? \"编辑ToDo\" : \"新建Todo\"}\r\n          placement=\"right\"\r\n          closable={true}\r\n          onClose={this.drawClose}\r\n          visible={drawerVisiable}\r\n          destroyOnClose={true}\r\n        >\r\n          <Form {...formItemLayout}>\r\n            <Form.Item label=\"内容\">\r\n              {getFieldDecorator(\"content\", {\r\n                initialValue: record ? record.content : \"\",\r\n                rules: [\r\n                  {\r\n                    required: true,\r\n                    message: \"内容不能为空\"\r\n                  }\r\n                ]\r\n              })(<Input placeholder=\"请输入内容\" />)}\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"备注\">\r\n              {getFieldDecorator(\"remark\", {\r\n                initialValue: record ? record.remark : \"\"\r\n              })(<Input.TextArea />)}\r\n            </Form.Item>\r\n\r\n            <Form.Item {...buttonLayout}>\r\n              <div className=\"button-bar-right\">\r\n                <Button\r\n                  type=\"primary\"\r\n                  style={{ marginRight: \"10px\" }}\r\n                  onClick={this.handleSubmit}\r\n                >\r\n                  确定\r\n                </Button>\r\n                <Button type=\"gray\" onClick={this.drawClose}>\r\n                  取消\r\n                </Button>\r\n              </div>\r\n            </Form.Item>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form.create()(TodoTable);\r\n","import Axios from \"axios\";\r\n\r\nexport class RestDataSource {\r\n  constructor(err_handler) {\r\n    this.error_handler = err_handler || (() => {});\r\n  }\r\n\r\n  SendRequst = (method, url, params, data) =>\r\n    Axios.request({ method, url, params, data });\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TodoTable from \"./TodoTable\";\nimport { Layout, Menu, Icon } from \"antd\";\nconst { Content, Header, Sider } = Layout;\n\nfunction App() {\n  const [completed, setCompleted] = useState(false);\n\n  return (\n    <div>\n      <Layout style={{ minHeight: \"100vh\" }}>\n        <Header style={{ backgroundColor: \"#40a9ff6b\" }}>\n          <div className=\"header-title\">备忘录</div>\n        </Header>\n        <Layout style={{ minHeight: \"100vh\" }}>\n          <Sider width={200} style={{ background: \"#fff\" }}>\n            <Menu theme=\"light\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\n              <Menu.Item\n                key=\"1\"\n                onClick={() => {\n                  setCompleted(false);\n                }}\n              >\n                <Icon type=\"pie-chart\" />\n                <span>待完成</span>\n              </Menu.Item>\n              <Menu.Item\n                key=\"2\"\n                onClick={() => {\n                  setCompleted(true);\n                }}\n              >\n                <Icon type=\"desktop\" />\n                <span>已完成</span>\n              </Menu.Item>\n            </Menu>\n          </Sider>\n          <Content>\n            <TodoTable completed={completed} />\n          </Content>\n        </Layout>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}