{"version":3,"sources":["TodoTable.js","RestDataSource.js","App.js","index.js"],"names":["dataSource","RestDataSource","err_handler","Object","classCallCheck","this","SendRequst","method","url","params","data","Axios","request","error_handler","formItemLayout","labelCol","xs","span","sm","wrapperCol","buttonLayout","offset","TodoTable","props","_this","possibleConstructorReturn","getPrototypeOf","call","getTodo","_","completed","then","res","todos","setState","filter","v","map","content","text","newTodo","record","drawOpen","handleSubmit","drawClose","form","getFieldsValue","state","id","remark","uuid","v1","console","log","setDone","modal","confirm","title","centered","onOk","drawerVisiable","_this2","_this3","columns","dataIndex","key","render","value","Date","toString","split","slice","join","align","react_default","a","createElement","es_button","onClick","handleDelete","openEdit","getFieldDecorator","_this$state","className","type","table","pagination","rowKey","drawer","width","placement","closable","onClose","visible","destroyOnClose","es_form","Item","label","initialValue","rules","required","message","input","placeholder","TextArea","style","marginRight","Component","src_TodoTable","create","Content","Header","Sider","App","_useState","useState","_useState2","slicedToArray","setCompleted","layout","minHeight","backgroundColor","background","menu","theme","defaultSelectedKeys","mode","icon","ReactDOM","src_App","document","getElementById"],"mappings":"ydAIMA,EAAa,ICDjB,SAAAC,EAAYC,GAAcC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAI,KAI1BC,WAAa,SAACC,EAAQC,EAAKC,EAAQC,GAAtB,OACXC,IAAMC,QAAQ,CAAEL,SAAQC,MAAKC,SAAQC,UAJrCL,KAAKQ,cAAgBX,GAAgB,cDEnCY,EAAiB,CACrBC,SAAU,CACRC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MAIVG,EAAe,CACnBD,WAAY,CAAEF,KAAM,GAAII,OAAQ,IAG5BC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAArB,OAAAC,EAAA,EAAAD,CAAAE,KAAAiB,IACjBE,EAAArB,OAAAsB,EAAA,EAAAtB,CAAAE,KAAAF,OAAAuB,EAAA,EAAAvB,CAAAmB,GAAAK,KAAAtB,KAAMkB,KAkBRK,QAAU,SAAAC,GAAK,IACPC,EAAcN,EAAKD,MAAnBO,UACN9B,EAAWM,WAAW,MAAO,cAAcyB,KAAK,SAAAC,GAC9C,IAAIC,EAAQD,EAAItB,MAAQ,GACxBc,EAAKU,SAAS,CACZD,MAAOA,EACJE,OAAO,SAAAC,GAAC,OAAIA,EAAEN,WAAaA,IAC3BO,IAAI,SAAAD,GAEH,OADAA,EAAEE,QAAUF,EAAEG,KACPH,SA5BEZ,EAkCnBgB,QAAU,SAAAX,GACRL,EAAKU,SAAS,CACZO,OAAQ,OAEVjB,EAAKkB,YAtCYlB,EAkEnBmB,aAAe,SAAAd,GACbL,EAAKoB,YACL,IAAIlC,EAAOc,EAAKD,MAAMsB,KAAKC,iBAErBL,EAAWjB,EAAKuB,MAAhBN,OACFA,EACFzC,EACGM,WAAW,OAAQ,aAAc,CAChCwB,WAAW,EACXS,KAAM7B,EAAK4B,QACXU,GAAIP,EAAOO,GACXC,OAAQvC,EAAKuC,SAEdlB,KAAK,SAAAK,GACJZ,EAAKI,YAGT5B,EACGM,WAAW,OAAQ,YAAa,CAC/BwB,WAAW,EACXS,KAAM7B,EAAK4B,QACXU,GAAIE,IAAKC,KACTF,OAAQvC,EAAKuC,SAEdlB,KAAK,SAAAK,GACJZ,EAAKI,YAIXwB,QAAQC,IAAI,2BAAQ,CAClBvB,WAAW,EACXS,KAAM7B,EAAK4B,QACXU,GAAI,GACJC,OAAQvC,EAAKuC,UAnGEzB,EAuGnB8B,QAAU,SAAAb,GACRc,EAAA,EAAMC,QAAQ,CACZC,MAAO,eACPC,UAAU,EACVpB,QAAS,2EACTqB,KAAM,WACJ3D,EACGM,WAAW,OAAQ,gBAAiB,CACnC0C,GAAIP,EAAOO,KAEZjB,KAAK,SAAAK,GACJZ,EAAKI,gBAlHIJ,EAwHnBkB,SAAW,SAAAb,GACTL,EAAKU,SAAS,CACZ0B,gBAAgB,KA1HDpC,EA6HnBoB,UAAY,SAAAf,GACVL,EAAKU,SAAS,CACZ0B,gBAAgB,KA7HlBpC,EAAKuB,MAAQ,CACXa,gBAAgB,EAChBnB,OAAQ,KACRR,MAAO,IALQT,mFAUjBnB,KAAKuB,qDAGYL,GACblB,KAAKkB,MAAMO,WAAaP,EAAMO,WAChCzB,KAAKuB,2CA0BAa,GACPpC,KAAKqC,WACLrC,KAAK6B,SAAS,CACZO,OAAQA,yCAICA,GAAQ,IAAAoB,EAAAxD,KACnBkD,EAAA,EAAMC,QAAQ,CACZC,MAAO,eACPC,UAAU,EACVpB,QAAS,qEACTqB,KAAM,WACJP,QAAQC,IAAI,gBACZrD,EACGM,WAAW,SAAU,YAAa,CACjC0C,GAAIP,EAAOO,KAEZjB,KAAK,SAAAK,GACJyB,EAAKjC,gDAuEN,IAAAkC,EAAAzD,KAEDL,EADUK,KAAK0C,MAAfd,MAGA8B,EAAU,CACd,CACEN,MAAO,eACPO,UAAW,UACXC,IAAK,WAEP,CACER,MAAO,eACPO,UAAW,SACXC,IAAK,UAEP,CACER,MAAO,2BACPO,UAAW,YACXC,IAAK,YACLC,OAAQ,SAAA9B,GAAC,OAAKA,EAAI,qBAAQ,uBAE5B,CACEqB,MAAO,2BACPO,UAAW,YACXC,IAAK,YACLC,OAAQ,SAAAC,GAAK,OACX,IAAIC,KAAKD,GACNE,WACAC,MAAM,KACNC,MAAM,EAAG,GACTC,KAAK,OAEZ,CACEf,MAAO,eACPgB,MAAO,SACPP,OAAQ,SAAC3B,EAAME,GAEb,OADoBqB,EAAKvC,MAAnBO,UAGF4C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAAC,EAAA,GACEC,QAAS,WACPhB,EAAKiB,aAAatC,KAFtB,iBAWFiC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAAC,EAAA,GACEC,QAAS,WACPhB,EAAKR,QAAQb,KAGd,IALH,kCAQAiC,EAAAC,EAAAC,cAAAC,EAAA,GACEC,QAAS,WACPhB,EAAKkB,SAASvC,KAFlB,gBAOAiC,EAAAC,EAAAC,cAAAC,EAAA,GACEC,QAAS,WACPhB,EAAKiB,aAAatC,KAFtB,oBAaJwC,EAAsB5E,KAAKkB,MAAMsB,KAAjCoC,kBAhFDC,EAiF4B7E,KAAK0C,MAAhCN,EAjFDyC,EAiFCzC,OAAQmB,EAjFTsB,EAiFStB,eAEhB,OACEc,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WACbT,EAAAC,EAAAC,cAAAC,EAAA,GAAQO,KAAK,UAAUN,QAASzE,KAAKmC,SAArC,qBAIFkC,EAAAC,EAAAC,cAAAS,EAAA,GACErF,WAAYA,EACZ+D,QAASA,EACTuB,YAAY,EACZC,OAAQ,SAAA9C,GAAM,OAAIA,EAAOO,MAE3B0B,EAAAC,EAAAC,cAAAY,EAAA,GACEC,MAAM,QACNhC,MAAOhB,EAAS,mBAAW,mBAC3BiD,UAAU,QACVC,UAAU,EACVC,QAASvF,KAAKuC,UACdiD,QAASjC,EACTkC,gBAAgB,GAEhBpB,EAAAC,EAAAC,cAAAmB,EAAA,EAAUjF,EACR4D,EAAAC,EAAAC,cAAAmB,EAAA,EAAMC,KAAN,CAAWC,MAAM,gBACdhB,EAAkB,UAAW,CAC5BiB,aAAczD,EAASA,EAAOH,QAAU,GACxC6D,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0CALdpB,CAQEP,EAAAC,EAAAC,cAAA0B,EAAA,GAAOC,YAAY,qCAGxB7B,EAAAC,EAAAC,cAAAmB,EAAA,EAAMC,KAAN,CAAWC,MAAM,gBACdhB,EAAkB,SAAU,CAC3BiB,aAAczD,EAASA,EAAOQ,OAAS,IADxCgC,CAEEP,EAAAC,EAAAC,cAAA0B,EAAA,EAAOE,SAAP,QAGL9B,EAAAC,EAAAC,cAAAmB,EAAA,EAAMC,KAAS5E,EACbsD,EAAAC,EAAAC,cAAA,OAAKO,UAAU,oBACbT,EAAAC,EAAAC,cAAAC,EAAA,GACEO,KAAK,UACLqB,MAAO,CAAEC,YAAa,QACtB5B,QAASzE,KAAKsC,cAHhB,gBAOA+B,EAAAC,EAAAC,cAAAC,EAAA,GAAQO,KAAK,OAAON,QAASzE,KAAKuC,WAAlC,4BAzQQ+D,aAqRTC,EAAAb,EAAA,EAAKc,QAAL,CAAcvF,GEtSrBwF,cAASC,aAAQC,YA2CVC,MAzCf,WAAe,IAAAC,EACqBC,oBAAS,GAD9BC,EAAAjH,OAAAkH,EAAA,EAAAlH,CAAA+G,EAAA,GACNpF,EADMsF,EAAA,GACKE,EADLF,EAAA,GAGb,OACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA2C,EAAA,GAAQd,MAAO,CAAEe,UAAW,UAC1B9C,EAAAC,EAAAC,cAACmC,EAAD,CAAQN,MAAO,CAAEgB,gBAAiB,cAChC/C,EAAAC,EAAAC,cAAA,OAAKO,UAAU,gBAAf,uBAEFT,EAAAC,EAAAC,cAAA2C,EAAA,GAAQd,MAAO,CAAEe,UAAW,UAC1B9C,EAAAC,EAAAC,cAACoC,EAAD,CAAOvB,MAAO,IAAKgB,MAAO,CAAEiB,WAAY,SACtChD,EAAAC,EAAAC,cAAA+C,EAAA,GAAMC,MAAM,QAAQC,oBAAqB,CAAC,KAAMC,KAAK,UACnDpD,EAAAC,EAAAC,cAAA+C,EAAA,EAAM3B,KAAN,CACE/B,IAAI,IACJa,QAAS,WACPwC,GAAa,KAGf5C,EAAAC,EAAAC,cAAAmD,EAAA,GAAM3C,KAAK,cACXV,EAAAC,EAAAC,cAAA,mCAEFF,EAAAC,EAAAC,cAAA+C,EAAA,EAAM3B,KAAN,CACE/B,IAAI,IACJa,QAAS,WACPwC,GAAa,KAGf5C,EAAAC,EAAAC,cAAAmD,EAAA,GAAM3C,KAAK,YACXV,EAAAC,EAAAC,cAAA,qCAINF,EAAAC,EAAAC,cAACkC,EAAD,KACEpC,EAAAC,EAAAC,cAACgC,EAAD,CAAW9E,UAAWA,SClClCkG,IAAS9D,OAAOQ,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.80473239.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Table, Button, Modal, Drawer, Input, Form } from \"antd\";\nimport { RestDataSource } from \"./RestDataSource\";\nimport uuid from \"uuid\";\nconst dataSource = new RestDataSource();\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 }\n  }\n};\n\nconst buttonLayout = {\n  wrapperCol: { span: 14, offset: 4 }\n};\n\nclass TodoTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drawerVisiable: false,\n      record: null,\n      todos: []\n    };\n  }\n\n  componentDidMount() {\n    this.getTodo();\n  }\n\n  componentDidUpdate(props) {\n    if (this.props.completed != props.completed) {\n      this.getTodo();\n    }\n  }\n\n  getTodo = _ => {\n    let { completed } = this.props;\n    dataSource.SendRequst(\"get\", \"/todo/list\").then(res => {\n      let todos = res.data || [];\n      this.setState({\n        todos: todos\n          .filter(v => v.completed == completed)\n          .map(v => {\n            v.content = v.text;\n            return v;\n          })\n      });\n    });\n  };\n\n  newTodo = _ => {\n    this.setState({\n      record: null\n    });\n    this.drawOpen();\n  };\n\n  openEdit(record) {\n    this.drawOpen();\n    this.setState({\n      record: record\n    });\n  }\n\n  handleDelete(record) {\n    Modal.confirm({\n      title: \"提示\",\n      centered: true,\n      content: \"确定要删除该代办项吗？\",\n      onOk: () => {\n        console.log(\"删除\");\n        dataSource\n          .SendRequst(\"delete\", \"/todo/del\", {\n            id: record.id\n          })\n          .then(v => {\n            this.getTodo();\n          });\n      }\n    });\n  }\n\n  handleSubmit = _ => {\n    this.drawClose();\n    let data = this.props.form.getFieldsValue();\n\n    let { record } = this.state;\n    if (record) {\n      dataSource\n        .SendRequst(\"post\", \"/todo/edit\", {\n          completed: false,\n          text: data.content,\n          id: record.id,\n          remark: data.remark\n        })\n        .then(v => {\n          this.getTodo();\n        });\n    } else {\n      dataSource\n        .SendRequst(\"post\", \"/todo/add\", {\n          completed: false,\n          text: data.content,\n          id: uuid.v1(),\n          remark: data.remark\n        })\n        .then(v => {\n          this.getTodo();\n        });\n    }\n\n    console.log(\"发请求！\", {\n      completed: false,\n      text: data.content,\n      id: \"\",\n      remark: data.remark\n    });\n  };\n\n  setDone = record => {\n    Modal.confirm({\n      title: \"提示\",\n      centered: true,\n      content: \"确定要标记为完成状态吗？\",\n      onOk: () => {\n        dataSource\n          .SendRequst(\"post\", \"todo/complete\", {\n            id: record.id\n          })\n          .then(v => {\n            this.getTodo();\n          });\n      }\n    });\n  };\n\n  drawOpen = _ => {\n    this.setState({\n      drawerVisiable: true\n    });\n  };\n  drawClose = _ => {\n    this.setState({\n      drawerVisiable: false\n    });\n  };\n\n  render() {\n    let { todos } = this.state;\n    const dataSource = todos;\n\n    const columns = [\n      {\n        title: \"内容\",\n        dataIndex: \"content\",\n        key: \"content\"\n      },\n      {\n        title: \"备注\",\n        dataIndex: \"remark\",\n        key: \"remark\"\n      },\n      {\n        title: \"完成状态\",\n        dataIndex: \"completed\",\n        key: \"completed\",\n        render: v => (v ? \"已完成\" : \"未完成\")\n      },\n      {\n        title: \"创建时间\",\n        dataIndex: \"timeStamp\",\n        key: \"timeStamp\",\n        render: value =>\n          new Date(value)\n            .toString()\n            .split(\" \")\n            .slice(1, 5)\n            .join(\" \")\n      },\n      {\n        title: \"操作\",\n        align: \"center\",\n        render: (text, record) => {\n          let { completed } = this.props;\n          if (completed) {\n            return (\n              <div>\n                <Button\n                  onClick={() => {\n                    this.handleDelete(record);\n                  }}\n                >\n                  删除\n                </Button>\n              </div>\n            );\n          } else {\n            return (\n              <div>\n                <Button\n                  onClick={() => {\n                    this.setDone(record);\n                  }}\n                >\n                  {\" \"}\n                  设为已完成\n                </Button>\n                <Button\n                  onClick={() => {\n                    this.openEdit(record);\n                  }}\n                >\n                  编辑\n                </Button>\n                <Button\n                  onClick={() => {\n                    this.handleDelete(record);\n                  }}\n                >\n                  删除\n                </Button>\n              </div>\n            );\n          }\n        }\n      }\n    ];\n    const { getFieldDecorator } = this.props.form;\n    const { record, drawerVisiable } = this.state;\n\n    return (\n      <div>\n        <div className=\"toolbar\">\n          <Button type=\"primary\" onClick={this.newTodo}>\n            新建Todo\n          </Button>\n        </div>\n        <Table\n          dataSource={dataSource}\n          columns={columns}\n          pagination={false}\n          rowKey={record => record.id}\n        />\n        <Drawer\n          width=\"400px\"\n          title={record ? \"编辑ToDo\" : \"新建Todo\"}\n          placement=\"right\"\n          closable={true}\n          onClose={this.drawClose}\n          visible={drawerVisiable}\n          destroyOnClose={true}\n        >\n          <Form {...formItemLayout}>\n            <Form.Item label=\"内容\">\n              {getFieldDecorator(\"content\", {\n                initialValue: record ? record.content : \"\",\n                rules: [\n                  {\n                    required: true,\n                    message: \"内容不能为空\"\n                  }\n                ]\n              })(<Input placeholder=\"请输入内容\" />)}\n            </Form.Item>\n\n            <Form.Item label=\"备注\">\n              {getFieldDecorator(\"remark\", {\n                initialValue: record ? record.remark : \"\"\n              })(<Input.TextArea />)}\n            </Form.Item>\n\n            <Form.Item {...buttonLayout}>\n              <div className=\"button-bar-right\">\n                <Button\n                  type=\"primary\"\n                  style={{ marginRight: \"10px\" }}\n                  onClick={this.handleSubmit}\n                >\n                  确定\n                </Button>\n                <Button type=\"gray\" onClick={this.drawClose}>\n                  取消\n                </Button>\n              </div>\n            </Form.Item>\n          </Form>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nexport default Form.create()(TodoTable);\n","import Axios from \"axios\";\n\nexport class RestDataSource {\n  constructor(err_handler) {\n    this.error_handler = err_handler || (() => {});\n  }\n\n  SendRequst = (method, url, params, data) =>\n    Axios.request({ method, url, params, data });\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TodoTable from \"./TodoTable\";\nimport { Layout, Menu, Icon } from \"antd\";\nconst { Content, Header, Sider } = Layout;\n\nfunction App() {\n  const [completed, setCompleted] = useState(false);\n\n  return (\n    <div>\n      <Layout style={{ minHeight: \"100vh\" }}>\n        <Header style={{ backgroundColor: \"#40a9ff6b\" }}>\n          <div className=\"header-title\">备忘录</div>\n        </Header>\n        <Layout style={{ minHeight: \"100vh\" }}>\n          <Sider width={200} style={{ background: \"#fff\" }}>\n            <Menu theme=\"light\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\n              <Menu.Item\n                key=\"1\"\n                onClick={() => {\n                  setCompleted(false);\n                }}\n              >\n                <Icon type=\"pie-chart\" />\n                <span>待完成</span>\n              </Menu.Item>\n              <Menu.Item\n                key=\"2\"\n                onClick={() => {\n                  setCompleted(true);\n                }}\n              >\n                <Icon type=\"desktop\" />\n                <span>已完成</span>\n              </Menu.Item>\n            </Menu>\n          </Sider>\n          <Content>\n            <TodoTable completed={completed} />\n          </Content>\n        </Layout>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}